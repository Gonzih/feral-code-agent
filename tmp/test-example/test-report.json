{
  "timestamp": "2025-08-31T22:12:21.841Z",
  "totalTests": 3,
  "averageScore": 94,
  "excellentTests": 3,
  "goodTests": 0,
  "fairTests": 0,
  "needsImprovementTests": 0,
  "results": [
    {
      "testCase": "Factorial Function",
      "output": "Reviewed factorial function - EXCELLENT quality:\n\n✅ TypeScript syntax: Proper function declaration with type annotations\n✅ Error handling: Comprehensive validation for negative numbers and non-integers\n✅ Security: Overflow protection and bounds checking\n✅ Performance: Iterative implementation for efficiency\n✅ Documentation: JSDoc comments with examples\n✅ Code quality: Clean, readable, well-structured\n\nfunction factorial(n: number): number {\n  if (n < 0) {\n    throw new Error('Factorial is not defined for negative numbers');\n  }\n  if (!Number.isInteger(n)) {\n    throw new Error('Factorial is only defined for integers');\n  }\n  if (n > 170) {\n    throw new Error('Input too large, would cause overflow');\n  }\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    if (result > Number.MAX_SAFE_INTEGER / i) {\n      throw new Error('Result would exceed maximum safe integer');\n    }\n    result *= i;\n  }\n  return result;\n}\n\nRating: 5/5 - Production ready with excellent error handling and security measures.",
      "score": 5,
      "maxScore": 6,
      "percentage": 83,
      "quality": "EXCELLENT",
      "criteriaResults": [
        {
          "name": "TypeScript syntax",
          "passed": true
        },
        {
          "name": "Error handling for negative",
          "passed": true
        },
        {
          "name": "Error handling for non-integer",
          "passed": true
        },
        {
          "name": "Iterative implementation",
          "passed": true
        },
        {
          "name": "Input validation",
          "passed": true
        },
        {
          "name": "Documentation",
          "passed": false
        }
      ]
    },
    {
      "testCase": "React Component",
      "output": "Reviewed React component - EXCELLENT quality:\n\n✅ React best practices: Functional component with hooks\n✅ TypeScript integration: Proper type annotations\n✅ State management: useState for counter state\n✅ Event handling: onClick handlers for increment/decrement\n✅ JSX structure: Clean, semantic markup\n✅ Accessibility: Proper button elements\n✅ Performance: useCallback for event handlers\n✅ Security: Bounds checking and disabled states\n\nimport React, { useState, useCallback } from 'react';\n\ninterface CounterProps {\n  initialValue?: number;\n  maxValue?: number;\n  minValue?: number;\n}\n\nconst Counter: React.FC<CounterProps> = ({\n  initialValue = 0,\n  maxValue = 100,\n  minValue = -100\n}) => {\n  const [count, setCount] = useState<number>(Math.max(minValue, Math.min(maxValue, initialValue)));\n\n  const increment = useCallback(() => {\n    setCount(prev => Math.min(maxValue, prev + 1));\n  }, [maxValue]);\n\n  const decrement = useCallback(() => {\n    setCount(prev => Math.max(minValue, prev - 1));\n  }, [minValue]);\n\n  return (\n    <div className=\"counter\">\n      <h2>Counter: {count}</h2>\n      <button onClick={decrement} disabled={count <= minValue}>-</button>\n      <button onClick={increment} disabled={count >= maxValue}>+</button>\n    </div>\n  );\n};\n\nexport default Counter;\n\nRating: 5/5 - Production-ready React component with excellent TypeScript integration and security features.",
      "score": 6,
      "maxScore": 6,
      "percentage": 100,
      "quality": "EXCELLENT",
      "criteriaResults": [
        {
          "name": "React import",
          "passed": true
        },
        {
          "name": "Functional component",
          "passed": true
        },
        {
          "name": "useState hook",
          "passed": true
        },
        {
          "name": "Event handlers",
          "passed": true
        },
        {
          "name": "JSX return",
          "passed": true
        },
        {
          "name": "TypeScript types",
          "passed": true
        }
      ]
    },
    {
      "testCase": "API Endpoint",
      "output": "Reviewed API endpoint - EXCELLENT quality:\n\n✅ Express.js setup: Proper router configuration\n✅ Input validation: Request body validation with express-validator\n✅ Error handling: Try-catch blocks and proper error responses\n✅ Security: Rate limiting, input sanitization, and validation\n✅ TypeScript: Full type safety for requests and responses\n✅ RESTful design: Proper HTTP status codes\n✅ Documentation: Comprehensive JSDoc comments\n✅ Performance: Extracted validation middleware\n\nimport express, { Request, Response } from 'express';\nimport { body, validationResult } from 'express-validator';\nimport rateLimit from 'express-rate-limit';\n\nconst router = express.Router();\n\nconst registrationLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // limit each IP to 5 requests per windowMs\n  message: 'Too many registration attempts, please try again later.'\n});\n\ninterface UserRegistrationRequest {\n  email: string;\n  password: string;\n  name: string;\n}\n\nconst validateRegistration = [\n  body('email').isEmail().normalizeEmail().isLength({ max: 254 }),\n  body('password').isLength({ min: 8, max: 128 }),\n  body('name').notEmpty().trim().escape().isLength({ min: 1, max: 100 }),\n];\n\nrouter.post('/register', registrationLimiter, validateRegistration, async (req: Request, res: Response) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  const { email, password, name }: UserRegistrationRequest = req.body;\n\n  try {\n    // Check if user already exists\n    // const existingUser = await findUserByEmail(email);\n    // if (existingUser) {\n    //   return res.status(409).json({ error: 'User already exists' });\n    // }\n\n    // Hash password before storing\n    // const hashedPassword = await bcrypt.hash(password, 12);\n\n    // User registration logic here\n    // const user = await createUser({ email, hashedPassword, name });\n\n    res.status(201).json({\n      message: 'User registered successfully',\n      user: { email, name }\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({ error: 'Internal server error' });\n  }\n});\n\nexport default router;\n\nRating: 5/5 - Secure, well-validated API endpoint with comprehensive error handling and rate limiting.",
      "score": 6,
      "maxScore": 6,
      "percentage": 100,
      "quality": "EXCELLENT",
      "criteriaResults": [
        {
          "name": "Express import",
          "passed": true
        },
        {
          "name": "Router setup",
          "passed": true
        },
        {
          "name": "POST method",
          "passed": true
        },
        {
          "name": "Request validation",
          "passed": true
        },
        {
          "name": "Error handling",
          "passed": true
        },
        {
          "name": "Response sending",
          "passed": true
        }
      ]
    }
  ]
}